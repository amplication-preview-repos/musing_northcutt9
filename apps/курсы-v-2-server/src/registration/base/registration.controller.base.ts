/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RegistrationService } from "../registration.service";
import { RegistrationCreateInput } from "./RegistrationCreateInput";
import { Registration } from "./Registration";
import { RegistrationFindManyArgs } from "./RegistrationFindManyArgs";
import { RegistrationWhereUniqueInput } from "./RegistrationWhereUniqueInput";
import { RegistrationUpdateInput } from "./RegistrationUpdateInput";

export class RegistrationControllerBase {
  constructor(protected readonly service: RegistrationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Registration })
  async createRegistration(
    @common.Body() data: RegistrationCreateInput
  ): Promise<Registration> {
    return await this.service.createRegistration({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Registration] })
  @ApiNestedQuery(RegistrationFindManyArgs)
  async registrations(@common.Req() request: Request): Promise<Registration[]> {
    const args = plainToClass(RegistrationFindManyArgs, request.query);
    return this.service.registrations({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Registration })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async registration(
    @common.Param() params: RegistrationWhereUniqueInput
  ): Promise<Registration | null> {
    const result = await this.service.registration({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Registration })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRegistration(
    @common.Param() params: RegistrationWhereUniqueInput,
    @common.Body() data: RegistrationUpdateInput
  ): Promise<Registration | null> {
    try {
      return await this.service.updateRegistration({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Registration })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRegistration(
    @common.Param() params: RegistrationWhereUniqueInput
  ): Promise<Registration | null> {
    try {
      return await this.service.deleteRegistration({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
